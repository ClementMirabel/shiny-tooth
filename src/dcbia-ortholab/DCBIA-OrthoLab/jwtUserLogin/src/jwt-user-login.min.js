angular.module("jwt-user-login",[]),angular.module("jwt-user-login").directive("userLogin",["$routeParams","$location","$rootScope","clusterauth",function(a,b,c,d){function e(e,f,g){e.showLogin=!0,e.newUser={},e.user={},e.resetUser=!1,a.token&&(e.showLogin=!1,e.resetUser={token:a.token}),e.createUser=function(){e.errorMsg="",d.createUser(e.newUser).then(function(){return d.getUser()}).then(function(a){c.user=a.data,b.path("/home")}).catch(function(a){throw 409===a.status&&(e.errorMsg="An account already exist with this email address. Login with your account or create a new one with a new email address"),a})},e.recoverPassword=function(){return e.errorMsg="",e.user.email?void d.sendRecoverPassword({email:e.user.email}).then(function(a){alert(a.data)}).catch(function(a){401===a.status&&(e.errorMsg="I don't know who you are, you need to create an account first!")}):(alert("No email address specified in email field."),!1)},e.resetPassword=function(){return e.errorMsg="",e.resetUser.password0!==e.resetUser.password1?(alert("Passwords are not the same"),!1):void d.updatePassword({password:e.resetUser.password1},e.resetUser.token).then(function(){return d.getUser()}).then(function(a){c.user=a.data,b.path("/home")}).catch(function(a){throw alert("Password must contains 6 characters including at least one uppercase letter and one number - special characte allowed"),console.error(a),a})},e.login=function(){e.errorMsg="",d.login(e.user).then(function(){return d.getUser()}).then(function(a){c.user=a.data,b.path("/home")}).catch(function(a){throw 401===a.status&&e.user.password&&(e.errorMsg="Wrong identification - check if email and password are corrects"),console.log(a),a})},e.switchForm=function(){e.errorMsg="",e.showLogin=!e.showLogin}}return{restrict:"E",link:e,templateUrl:"bower_components/jwt-user-login/src/jwtUserLogin.template.html"}}]),angular.module("jwt-user-login").config(["$httpProvider","$provide",function(a,b){b.factory("jwtInterceptor",["$q","$location",function(a,b){return{request:function(a){var b=localStorage.getItem("clusterpost_token");return b&&(a.headers.authorization="Bearer "+b),a},requestError:function(b){return a.reject(b)},response:function(a){return a},responseError:function(c){return 401!==c.status||localStorage.getItem("clusterpost_token")||b.path("/"),404===c.status&&b.path("/notFound"),a.reject(c)}}}]),a.interceptors.push("jwtInterceptor")}]).factory("clusterauth",["$q","$http","$location","$rootScope",function(a,b,c,d){return{createUser:function(a){return b({method:"POST",url:"/auth/user",data:a}).then(function(a){localStorage.setItem("clusterpost_token",a.data.token)})},getUsers:function(){return b({method:"GET",url:"/auth/users"})},getUser:function(){return d.user?Promise.resolve(d.user):b({method:"GET",url:"/auth/user"}).then(function(a){return d.user=a.data,a.data})},deleteUser:function(a){return b({method:"DELETE",url:"/auth/user",data:a})},login:function(a){return b({method:"POST",url:"/auth/login",data:a}).then(function(a){localStorage.setItem("clusterpost_token",a.data.token)})},updatePassword:function(a,c){return b({method:"PUT",url:"/auth/login",data:a,headers:{authorization:"Bearer "+c}}).then(function(a){localStorage.setItem("clusterpost_token",a.data.token)})},sendRecoverPassword:function(a){return b({method:"POST",url:"/auth/reset",data:a})},logout:function(){localStorage.removeItem("clusterpost_token"),c.path("/")},updateUser:function(a){return b({method:"PUT",url:"/auth/users",data:a})}}}]);